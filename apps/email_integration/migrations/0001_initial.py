# Generated by Django 4.2.7 on 2025-09-09 11:53

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('customers', '0003_remove_customer_communication_preferences'),
        ('email_operations', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailAutomation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Automation name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Automation description')),
                ('trigger_type', models.CharField(choices=[('email_received', 'Email Received'), ('email_sent', 'Email Sent'), ('email_opened', 'Email Opened'), ('email_clicked', 'Email Clicked'), ('email_bounced', 'Email Bounced'), ('time_based', 'Time Based'), ('webhook', 'Webhook'), ('manual', 'Manual')], help_text='Trigger type', max_length=50)),
                ('trigger_conditions', models.JSONField(help_text='Trigger conditions and rules')),
                ('actions', models.JSONField(help_text='Actions to perform when triggered')),
                ('is_active', models.BooleanField(default=True, help_text='Automation is active')),
                ('execution_count', models.PositiveIntegerField(default=0, help_text='Number of times executed')),
                ('last_executed_at', models.DateTimeField(blank=True, help_text='Last execution time', null=True)),
                ('success_count', models.PositiveIntegerField(default=0, help_text='Successful executions')),
                ('failure_count', models.PositiveIntegerField(default=0, help_text='Failed executions')),
                ('delay_seconds', models.PositiveIntegerField(default=0, help_text='Delay before execution (seconds)')),
                ('max_executions', models.PositiveIntegerField(blank=True, help_text='Maximum executions (null = unlimited)', null=True)),
                ('run_once_per_email', models.BooleanField(default=True, help_text='Run only once per email')),
                ('run_once_per_customer', models.BooleanField(default=False, help_text='Run only once per customer')),
                ('priority', models.PositiveIntegerField(default=0, help_text='Execution priority (higher = first)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_automations',
                'ordering': ['-priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailWebhook',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('webhook_id', models.UUIDField(default=uuid.uuid4, help_text='Unique webhook ID', unique=True)),
                ('provider', models.CharField(choices=[('sendgrid', 'SendGrid'), ('aws_ses', 'AWS SES'), ('mailgun', 'Mailgun'), ('postmark', 'Postmark'), ('mandrill', 'Mandrill'), ('smtp', 'SMTP')], help_text='Email provider', max_length=50)),
                ('event_type', models.CharField(choices=[('delivered', 'Delivered'), ('opened', 'Opened'), ('clicked', 'Clicked'), ('bounced', 'Bounced'), ('dropped', 'Dropped'), ('spam_report', 'Spam Report'), ('unsubscribe', 'Unsubscribe'), ('processed', 'Processed'), ('deferred', 'Deferred'), ('blocked', 'Blocked')], help_text='Webhook event type', max_length=50)),
                ('webhook_data', models.JSONField(help_text='Raw webhook payload')),
                ('processed_data', models.JSONField(default=dict, help_text='Processed webhook data')),
                ('email_message_id', models.CharField(blank=True, help_text='Related email message ID', max_length=500)),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('processed', 'Processed'), ('failed', 'Failed'), ('ignored', 'Ignored')], default='pending', max_length=20)),
                ('processed_at', models.DateTimeField(blank=True, help_text='When webhook was processed', null=True)),
                ('processing_attempts', models.PositiveIntegerField(default=0, help_text='Number of processing attempts')),
                ('error_message', models.TextField(blank=True, help_text='Error message if processing failed')),
                ('received_at', models.DateTimeField(default=django.utils.timezone.now, help_text='When webhook was received')),
                ('provider_timestamp', models.DateTimeField(blank=True, help_text='Provider timestamp', null=True)),
                ('signature', models.CharField(blank=True, help_text='Webhook signature for verification', max_length=500)),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='Source IP address', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('email_id', models.ForeignKey(blank=True, help_text='Related email message', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='webhooks', to='email_operations.emailmessage')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_webhooks',
                'ordering': ['-received_at'],
                'indexes': [models.Index(fields=['provider', 'event_type'], name='email_webho_provide_60e6a6_idx'), models.Index(fields=['status', 'received_at'], name='email_webho_status_42c7ca_idx'), models.Index(fields=['email_message_id'], name='email_webho_email_m_907e1b_idx'), models.Index(fields=['received_at'], name='email_webho_receive_0b8a9a_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailTemplateVariable',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Variable name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Variable description')),
                ('variable_type', models.CharField(choices=[('customer', 'Customer Data'), ('policy', 'Policy Data'), ('system', 'System Data'), ('custom', 'Custom Data')], help_text='Variable type', max_length=50)),
                ('data_source', models.CharField(help_text='Data source path', max_length=200)),
                ('default_value', models.TextField(blank=True, help_text='Default value if not found')),
                ('format_string', models.CharField(blank=True, help_text='Format string for value', max_length=100)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_template_variables',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['variable_type'], name='email_templ_variabl_24ac02_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailSLA',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='SLA name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='SLA description')),
                ('conditions', models.JSONField(help_text='Conditions that trigger this SLA')),
                ('first_response_minutes', models.PositiveIntegerField(help_text='First response time in minutes')),
                ('resolution_hours', models.PositiveIntegerField(help_text='Resolution time in hours')),
                ('escalation_enabled', models.BooleanField(default=True, help_text='Enable escalation')),
                ('escalation_minutes', models.PositiveIntegerField(blank=True, help_text='Escalation time in minutes', null=True)),
                ('escalation_actions', models.JSONField(default=list, help_text='Escalation actions')),
                ('is_active', models.BooleanField(default=True, help_text='SLA is active')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_slas',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['is_active'], name='email_slas_is_acti_5dfb89_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailIntegrationAnalytics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('date', models.DateField(help_text='Analytics date')),
                ('period_type', models.CharField(choices=[('daily', 'Daily'), ('weekly', 'Weekly'), ('monthly', 'Monthly'), ('yearly', 'Yearly')], default='daily', help_text='Analytics period type', max_length=20)),
                ('total_emails_received', models.PositiveIntegerField(default=0, help_text='Total emails received')),
                ('total_emails_sent', models.PositiveIntegerField(default=0, help_text='Total emails sent')),
                ('total_emails_replied', models.PositiveIntegerField(default=0, help_text='Total emails replied')),
                ('total_emails_forwarded', models.PositiveIntegerField(default=0, help_text='Total emails forwarded')),
                ('avg_response_time_minutes', models.FloatField(default=0.0, help_text='Average response time in minutes')),
                ('min_response_time_minutes', models.FloatField(default=0.0, help_text='Minimum response time in minutes')),
                ('max_response_time_minutes', models.FloatField(default=0.0, help_text='Maximum response time in minutes')),
                ('total_resolved', models.PositiveIntegerField(default=0, help_text='Total resolved emails')),
                ('resolution_rate', models.FloatField(default=0.0, help_text='Resolution rate percentage')),
                ('avg_resolution_time_hours', models.FloatField(default=0.0, help_text='Average resolution time in hours')),
                ('customer_satisfaction_score', models.FloatField(default=0.0, help_text='Customer satisfaction score (0-10)')),
                ('positive_feedback_count', models.PositiveIntegerField(default=0, help_text='Positive feedback count')),
                ('negative_feedback_count', models.PositiveIntegerField(default=0, help_text='Negative feedback count')),
                ('category_breakdown', models.JSONField(default=dict, help_text='Email category breakdown')),
                ('priority_breakdown', models.JSONField(default=dict, help_text='Priority breakdown')),
                ('sentiment_breakdown', models.JSONField(default=dict, help_text='Sentiment breakdown')),
                ('emails_per_hour', models.FloatField(default=0.0, help_text='Average emails per hour')),
                ('peak_hour', models.TimeField(blank=True, help_text='Peak email hour', null=True)),
                ('busiest_day', models.CharField(blank=True, help_text='Busiest day of week', max_length=20)),
                ('sla_met_count', models.PositiveIntegerField(default=0, help_text='SLA met count')),
                ('sla_missed_count', models.PositiveIntegerField(default=0, help_text='SLA missed count')),
                ('sla_compliance_rate', models.FloatField(default=0.0, help_text='SLA compliance rate percentage')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_integration_analytics',
                'ordering': ['-date', 'period_type'],
                'indexes': [models.Index(fields=['date', 'period_type'], name='email_integ_date_1f3add_idx'), models.Index(fields=['date'], name='email_integ_date_d27349_idx')],
                'unique_together': {('date', 'period_type')},
            },
        ),
        migrations.CreateModel(
            name='EmailIntegration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Integration name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Integration description')),
                ('integration_type', models.CharField(choices=[('crm', 'CRM System'), ('helpdesk', 'Helpdesk System'), ('calendar', 'Calendar System'), ('slack', 'Slack'), ('teams', 'Microsoft Teams'), ('zapier', 'Zapier'), ('webhook', 'Custom Webhook'), ('api', 'Custom API')], help_text='Integration type', max_length=50)),
                ('config', models.JSONField(help_text='Integration configuration')),
                ('credentials', models.JSONField(default=dict, help_text='Encrypted credentials')),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive'), ('error', 'Error'), ('pending', 'Pending')], default='pending', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Integration is active')),
                ('last_sync', models.DateTimeField(blank=True, help_text='Last successful sync', null=True)),
                ('last_error', models.TextField(blank=True, help_text='Last error message')),
                ('error_count', models.PositiveIntegerField(default=0, help_text='Error count')),
                ('sync_interval_minutes', models.PositiveIntegerField(default=60, help_text='Sync interval in minutes')),
                ('auto_sync', models.BooleanField(default=True, help_text='Enable automatic sync')),
                ('sync_direction', models.CharField(choices=[('inbound', 'Inbound Only'), ('outbound', 'Outbound Only'), ('bidirectional', 'Bidirectional')], default='bidirectional', help_text='Sync direction', max_length=20)),
                ('total_syncs', models.PositiveIntegerField(default=0, help_text='Total sync operations')),
                ('successful_syncs', models.PositiveIntegerField(default=0, help_text='Successful sync operations')),
                ('failed_syncs', models.PositiveIntegerField(default=0, help_text='Failed sync operations')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_integrations',
                'ordering': ['name'],
                'indexes': [models.Index(fields=['integration_type', 'is_active'], name='email_integ_integra_9f42c0_idx'), models.Index(fields=['status', 'last_sync'], name='email_integ_status_897fdf_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailAutomationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('trigger_data', models.JSONField(help_text='Data that triggered the automation')),
                ('execution_result', models.JSONField(default=dict, help_text='Execution result data')),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('partial', 'Partial Success'), ('skipped', 'Skipped')], help_text='Execution status', max_length=20)),
                ('started_at', models.DateTimeField(help_text='Execution start time')),
                ('completed_at', models.DateTimeField(blank=True, help_text='Execution completion time', null=True)),
                ('duration_seconds', models.FloatField(blank=True, help_text='Execution duration in seconds', null=True)),
                ('error_message', models.TextField(blank=True, help_text='Error message if failed')),
                ('error_traceback', models.TextField(blank=True, help_text='Error traceback if failed')),
                ('automation', models.ForeignKey(help_text='Related automation', on_delete=django.db.models.deletion.CASCADE, related_name='execution_logs', to='email_integration.emailautomation')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, help_text='Related customer', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='automation_logs', to='customers.customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('email_message', models.ForeignKey(blank=True, help_text='Related email message', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='automation_logs', to='email_operations.emailmessage')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_automation_logs',
                'ordering': ['-started_at'],
                'indexes': [models.Index(fields=['automation', 'started_at'], name='email_autom_automat_8777c7_idx'), models.Index(fields=['status', 'started_at'], name='email_autom_status_3f41f2_idx'), models.Index(fields=['started_at'], name='email_autom_started_717183_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailautomation',
            index=models.Index(fields=['is_active', 'trigger_type'], name='email_autom_is_acti_312b87_idx'),
        ),
        migrations.AddIndex(
            model_name='emailautomation',
            index=models.Index(fields=['last_executed_at'], name='email_autom_last_ex_2c81ba_idx'),
        ),
        migrations.AddIndex(
            model_name='emailautomation',
            index=models.Index(fields=['priority'], name='email_autom_priorit_77c655_idx'),
        ),
    ]
