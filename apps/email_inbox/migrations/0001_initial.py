# Generated by Django 4.2.7 on 2025-09-09 08:56

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('customers', '0003_remove_customer_communication_preferences'),
        ('policies', '0004_policybeneficiary'),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailFolder',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Folder name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Folder description')),
                ('folder_type', models.CharField(choices=[('inbox', 'Inbox'), ('sent', 'Sent'), ('drafts', 'Drafts'), ('trash', 'Trash'), ('archive', 'Archive'), ('spam', 'Spam'), ('custom', 'Custom')], default='custom', max_length=20)),
                ('color', models.CharField(default='#007bff', help_text='Folder color in hex', max_length=7)),
                ('icon', models.CharField(default='folder', help_text='Folder icon', max_length=50)),
                ('sort_order', models.PositiveIntegerField(default=0, help_text='Sort order for display')),
                ('is_system', models.BooleanField(default=False, help_text='System folder (cannot be deleted)')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('parent_folder', models.ForeignKey(blank=True, help_text='Parent folder for nested folders', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subfolders', to='email_inbox.emailfolder')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_folders',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailInboxMessage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('message_id', models.CharField(help_text='Unique message ID', max_length=500, unique=True)),
                ('thread_id', models.CharField(blank=True, help_text='Thread ID for conversation grouping', max_length=500)),
                ('in_reply_to', models.CharField(blank=True, help_text='Message ID this is replying to', max_length=500)),
                ('references', models.TextField(blank=True, help_text='Reference message IDs')),
                ('from_email', models.EmailField(help_text='Sender email address', max_length=254)),
                ('from_name', models.CharField(blank=True, help_text='Sender name', max_length=200)),
                ('to_emails', models.JSONField(default=list, help_text='Recipient email addresses')),
                ('cc_emails', models.JSONField(blank=True, default=list, help_text='CC email addresses')),
                ('bcc_emails', models.JSONField(blank=True, default=list, help_text='BCC email addresses')),
                ('reply_to', models.EmailField(blank=True, help_text='Reply-to email address', max_length=254)),
                ('subject', models.CharField(help_text='Email subject', max_length=500)),
                ('html_content', models.TextField(help_text='HTML email content')),
                ('text_content', models.TextField(blank=True, help_text='Plain text content')),
                ('status', models.CharField(choices=[('unread', 'Unread'), ('read', 'Read'), ('replied', 'Replied'), ('forwarded', 'Forwarded'), ('archived', 'Archived'), ('deleted', 'Deleted')], default='unread', max_length=20)),
                ('is_starred', models.BooleanField(default=False, help_text='Starred email')),
                ('is_important', models.BooleanField(default=False, help_text='Important email')),
                ('is_spam', models.BooleanField(default=False, help_text='Spam email')),
                ('is_phishing', models.BooleanField(default=False, help_text='Phishing email')),
                ('category', models.CharField(blank=True, help_text='Email category', max_length=50)),
                ('subcategory', models.CharField(blank=True, help_text='Email subcategory', max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('sentiment', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('confidence_score', models.FloatField(default=0.0, help_text='Classification confidence score')),
                ('attachments', models.JSONField(default=list, help_text='Email attachments')),
                ('attachment_count', models.PositiveIntegerField(default=0, help_text='Number of attachments')),
                ('tags', models.CharField(blank=True, help_text='Comma-separated tags', max_length=500)),
                ('received_at', models.DateTimeField(help_text='When email was received')),
                ('processed_at', models.DateTimeField(blank=True, help_text='When email was processed', null=True)),
                ('read_at', models.DateTimeField(blank=True, help_text='When email was first read', null=True)),
                ('replied_at', models.DateTimeField(blank=True, help_text='When email was replied to', null=True)),
                ('headers', models.JSONField(default=dict, help_text='Email headers')),
                ('size_bytes', models.PositiveIntegerField(default=0, help_text='Email size in bytes')),
                ('source', models.CharField(default='unknown', help_text='Email source', max_length=100)),
                ('source_message_id', models.CharField(blank=True, help_text='Source message ID', max_length=500)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, help_text='Associated customer', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inbox_emails', to='customers.customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('folder', models.ForeignKey(blank=True, help_text='Email folder', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='messages', to='email_inbox.emailfolder')),
                ('policy', models.ForeignKey(blank=True, help_text='Associated policy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='inbox_emails', to='policies.policy')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_inbox_messages',
                'ordering': ['-received_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailFilter',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Filter name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Filter description')),
                ('filter_type', models.CharField(choices=[('incoming', 'Incoming Emails'), ('outgoing', 'Outgoing Emails'), ('both', 'Both Incoming and Outgoing')], default='incoming', max_length=20)),
                ('filter_rules', models.JSONField(help_text='Filter conditions and rules')),
                ('actions', models.JSONField(help_text='Actions to perform when filter matches')),
                ('is_active', models.BooleanField(default=True, help_text='Filter is active')),
                ('apply_to_existing', models.BooleanField(default=False, help_text='Apply to existing emails')),
                ('match_count', models.PositiveIntegerField(default=0, help_text='Number of emails matched')),
                ('last_matched_at', models.DateTimeField(blank=True, help_text='When filter last matched', null=True)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_filters',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='EmailConversation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('thread_id', models.CharField(help_text='Unique thread ID', max_length=500, unique=True)),
                ('subject', models.CharField(help_text='Conversation subject', max_length=500)),
                ('participants', models.JSONField(default=list, help_text='Email addresses of participants')),
                ('message_count', models.PositiveIntegerField(default=0, help_text='Number of messages in thread')),
                ('unread_count', models.PositiveIntegerField(default=0, help_text='Number of unread messages')),
                ('is_resolved', models.BooleanField(default=False, help_text='Conversation is resolved')),
                ('is_archived', models.BooleanField(default=False, help_text='Conversation is archived')),
                ('is_starred', models.BooleanField(default=False, help_text='Conversation is starred')),
                ('category', models.CharField(blank=True, help_text='Conversation category', max_length=50)),
                ('priority', models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=20)),
                ('sentiment', models.CharField(choices=[('positive', 'Positive'), ('neutral', 'Neutral'), ('negative', 'Negative'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('started_at', models.DateTimeField(help_text='When conversation started')),
                ('last_message_at', models.DateTimeField(help_text='When last message was received')),
                ('last_activity_at', models.DateTimeField(help_text='When last activity occurred')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('customer', models.ForeignKey(blank=True, help_text='Associated customer', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_conversations', to='customers.customer')),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('policy', models.ForeignKey(blank=True, help_text='Associated policy', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='email_conversations', to='policies.policy')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_conversations',
                'ordering': ['-last_activity_at'],
            },
        ),
        migrations.CreateModel(
            name='EmailAttachment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('filename', models.CharField(help_text='Original filename', max_length=255)),
                ('content_type', models.CharField(help_text='MIME content type', max_length=100)),
                ('size_bytes', models.PositiveIntegerField(help_text='File size in bytes')),
                ('file_path', models.CharField(help_text='File storage path', max_length=500)),
                ('file_url', models.URLField(blank=True, help_text='File access URL')),
                ('is_safe', models.BooleanField(default=True, help_text='File is safe to open')),
                ('virus_scan_status', models.CharField(default='pending', help_text='Virus scan status', max_length=20)),
                ('virus_scan_result', models.TextField(blank=True, help_text='Virus scan result')),
                ('checksum', models.CharField(blank=True, help_text='File checksum', max_length=64)),
                ('description', models.TextField(blank=True, help_text='File description')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('message', models.ForeignKey(help_text='Associated email message', on_delete=django.db.models.deletion.CASCADE, related_name='email_attachments', to='email_inbox.emailinboxmessage')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_attachments',
                'ordering': ['filename'],
            },
        ),
        migrations.CreateModel(
            name='EmailSearchQuery',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text='Search query name', max_length=100)),
                ('description', models.TextField(blank=True, help_text='Search description')),
                ('query_string', models.TextField(help_text='Search query string')),
                ('search_params', models.JSONField(default=dict, help_text='Search parameters')),
                ('use_count', models.PositiveIntegerField(default=0, help_text='Number of times used')),
                ('last_used_at', models.DateTimeField(blank=True, help_text='When last used', null=True)),
                ('is_public', models.BooleanField(default=False, help_text='Query is public')),
                ('is_favorite', models.BooleanField(default=False, help_text='Query is favorite')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_search_queries',
                'ordering': ['-last_used_at', 'name'],
                'indexes': [models.Index(fields=['is_public', 'is_favorite'], name='email_searc_is_publ_d9029c_idx'), models.Index(fields=['last_used_at'], name='email_searc_last_us_c7bcfe_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['from_email', 'received_at'], name='email_inbox_from_em_e7b9ed_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['thread_id', 'received_at'], name='email_inbox_thread__05adaa_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['status', 'received_at'], name='email_inbox_status_7fe3d3_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['category', 'received_at'], name='email_inbox_categor_17dcdb_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['folder', 'received_at'], name='email_inbox_folder__3a008e_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['is_starred', 'received_at'], name='email_inbox_is_star_014893_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['is_important', 'received_at'], name='email_inbox_is_impo_00c0f5_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['customer', 'received_at'], name='email_inbox_custome_0d86dc_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['policy', 'received_at'], name='email_inbox_policy__d0083b_idx'),
        ),
        migrations.AddIndex(
            model_name='emailinboxmessage',
            index=models.Index(fields=['received_at'], name='email_inbox_receive_bd0735_idx'),
        ),
        migrations.AddIndex(
            model_name='emailfolder',
            index=models.Index(fields=['folder_type', 'is_system'], name='email_folde_folder__bf318c_idx'),
        ),
        migrations.AddIndex(
            model_name='emailfolder',
            index=models.Index(fields=['parent_folder', 'sort_order'], name='email_folde_parent__4b1691_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='emailfolder',
            unique_together={('name', 'parent_folder')},
        ),
        migrations.AddIndex(
            model_name='emailfilter',
            index=models.Index(fields=['is_active', 'filter_type'], name='email_filte_is_acti_80bec4_idx'),
        ),
        migrations.AddIndex(
            model_name='emailfilter',
            index=models.Index(fields=['last_matched_at'], name='email_filte_last_ma_0c545d_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['thread_id'], name='email_conve_thread__c50c9b_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['participants'], name='email_conve_partici_445fa0_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['category', 'last_activity_at'], name='email_conve_categor_360a43_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['is_resolved', 'last_activity_at'], name='email_conve_is_reso_dee91f_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['customer', 'last_activity_at'], name='email_conve_custome_16820b_idx'),
        ),
        migrations.AddIndex(
            model_name='emailconversation',
            index=models.Index(fields=['policy', 'last_activity_at'], name='email_conve_policy__faa8a0_idx'),
        ),
        migrations.AddIndex(
            model_name='emailattachment',
            index=models.Index(fields=['message', 'filename'], name='email_attac_message_315834_idx'),
        ),
        migrations.AddIndex(
            model_name='emailattachment',
            index=models.Index(fields=['content_type'], name='email_attac_content_ee7134_idx'),
        ),
        migrations.AddIndex(
            model_name='emailattachment',
            index=models.Index(fields=['is_safe', 'virus_scan_status'], name='email_attac_is_safe_196f09_idx'),
        ),
    ]
