# Generated by Django 4.2.7 on 2025-09-08 17:09

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='EmailProviderConfig',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(help_text="Provider name e.g., 'SendGrid Primary', 'AWS SES Backup'", max_length=255)),
                ('provider_type', models.CharField(choices=[('sendgrid', 'SendGrid'), ('aws_ses', 'AWS SES'), ('smtp', 'SMTP'), ('gmail_api', 'Gmail API'), ('outlook_api', 'Outlook API')], max_length=50)),
                ('is_default', models.BooleanField(default=False, help_text='Whether this is the default provider')),
                ('is_active', models.BooleanField(default=True, help_text='Whether this provider is currently active')),
                ('priority', models.PositiveIntegerField(default=1, help_text='Priority order (1=highest)')),
                ('api_key', models.TextField(blank=True, help_text='Encrypted API key')),
                ('api_secret', models.TextField(blank=True, help_text='Encrypted API secret')),
                ('access_key_id', models.TextField(blank=True, help_text='Encrypted AWS Access Key ID')),
                ('secret_access_key', models.TextField(blank=True, help_text='Encrypted AWS Secret Access Key')),
                ('region', models.CharField(blank=True, help_text='AWS region for SES', max_length=50)),
                ('smtp_host', models.CharField(blank=True, max_length=255)),
                ('smtp_port', models.PositiveIntegerField(default=587, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(65535)])),
                ('smtp_username', models.CharField(blank=True, max_length=255)),
                ('smtp_password', models.TextField(blank=True, help_text='Encrypted SMTP password')),
                ('smtp_use_tls', models.BooleanField(default=True)),
                ('smtp_use_ssl', models.BooleanField(default=False)),
                ('from_email', models.EmailField(help_text='Default from email address', max_length=254)),
                ('from_name', models.CharField(blank=True, help_text='Default from name', max_length=255)),
                ('reply_to', models.EmailField(blank=True, help_text='Default reply-to email', max_length=254)),
                ('daily_limit', models.PositiveIntegerField(default=10000, help_text='Daily email limit')),
                ('monthly_limit', models.PositiveIntegerField(default=100000, help_text='Monthly email limit')),
                ('rate_limit_per_minute', models.PositiveIntegerField(default=100, help_text='Rate limit per minute')),
                ('last_health_check', models.DateTimeField(blank=True, null=True)),
                ('health_status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('unhealthy', 'Unhealthy'), ('unknown', 'Unknown')], default='unknown', max_length=20)),
                ('health_error_message', models.TextField(blank=True)),
                ('consecutive_failures', models.PositiveIntegerField(default=0)),
                ('emails_sent_today', models.PositiveIntegerField(default=0)),
                ('emails_sent_this_month', models.PositiveIntegerField(default=0)),
                ('last_reset_daily', models.DateField(auto_now_add=True)),
                ('last_reset_monthly', models.DateField(auto_now_add=True)),
                ('total_emails_sent', models.PositiveIntegerField(default=0)),
                ('total_emails_failed', models.PositiveIntegerField(default=0)),
                ('average_response_time', models.FloatField(default=0.0, help_text='Average response time in seconds')),
                ('additional_settings', models.JSONField(blank=True, default=dict)),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='created_email_providers', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_provider_configs',
                'ordering': ['priority', 'name'],
            },
        ),
        migrations.CreateModel(
            name='EmailProviderUsageLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('emails_sent', models.PositiveIntegerField(default=0)),
                ('emails_failed', models.PositiveIntegerField(default=0)),
                ('total_response_time', models.FloatField(default=0.0)),
                ('date', models.DateField()),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='usage_logs', to='email_provider.emailproviderconfig')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_provider_usage_logs',
                'ordering': ['-date'],
                'indexes': [models.Index(fields=['provider', 'date'], name='email_provi_provide_8e4ec4_idx')],
                'unique_together': {('provider', 'date')},
            },
        ),
        migrations.CreateModel(
            name='EmailProviderTestResult',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('test_type', models.CharField(choices=[('connection', 'Connection Test'), ('authentication', 'Authentication Test'), ('send_test', 'Send Test Email'), ('api_validation', 'API Validation')], max_length=50)),
                ('status', models.CharField(choices=[('success', 'Success'), ('failed', 'Failed'), ('warning', 'Warning')], max_length=20)),
                ('message', models.TextField()),
                ('response_time', models.FloatField(blank=True, null=True)),
                ('test_data', models.JSONField(blank=True, default=dict)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='test_results', to='email_provider.emailproviderconfig')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_provider_test_results',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['provider', 'test_type'], name='email_provi_provide_959983_idx'), models.Index(fields=['status', 'created_at'], name='email_provi_status_53e4b6_idx')],
            },
        ),
        migrations.CreateModel(
            name='EmailProviderHealthLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True, db_index=True)),
                ('is_deleted', models.BooleanField(db_index=True, default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('status', models.CharField(choices=[('healthy', 'Healthy'), ('degraded', 'Degraded'), ('unhealthy', 'Unhealthy')], max_length=20)),
                ('response_time', models.FloatField(help_text='Response time in seconds')),
                ('error_message', models.TextField(blank=True)),
                ('test_type', models.CharField(choices=[('connection', 'Connection Test'), ('send_test', 'Send Test'), ('api_test', 'API Test')], max_length=50)),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_created_objects', to=settings.AUTH_USER_MODEL)),
                ('deleted_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_deleted_objects', to=settings.AUTH_USER_MODEL)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='health_logs', to='email_provider.emailproviderconfig')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='%(class)s_updated_objects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'email_provider_health_logs',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['provider', 'created_at'], name='email_provi_provide_bc728b_idx'), models.Index(fields=['status', 'created_at'], name='email_provi_status_ad354f_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='emailproviderconfig',
            index=models.Index(fields=['provider_type', 'is_active'], name='email_provi_provide_003c9e_idx'),
        ),
        migrations.AddIndex(
            model_name='emailproviderconfig',
            index=models.Index(fields=['is_default', 'is_active'], name='email_provi_is_defa_190637_idx'),
        ),
        migrations.AddIndex(
            model_name='emailproviderconfig',
            index=models.Index(fields=['health_status', 'priority'], name='email_provi_health__4f53d2_idx'),
        ),
        migrations.AddConstraint(
            model_name='emailproviderconfig',
            constraint=models.UniqueConstraint(condition=models.Q(('is_default', True)), fields=('is_default',), name='unique_default_email_provider'),
        ),
    ]
